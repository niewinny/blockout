name: Build release ZIP

on:
  release:
    types: [published]   # run when a release is published

permissions:
  contents: write        # needed to upload assets & edit release body

jobs:
  build-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code at the release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}   # tag that triggered the release

      - name: Prepare clean package (remove dotfiles/dirs)
        run: |
          mkdir -p package
          # copy everything except the git data; we'll remove dotfiles afterward
          rsync -a --exclude='.git' ./ package/
          cd package
          # remove any hidden files & directories recursively (keeps current dir safe)
          find . -mindepth 1 -name '.*' -exec rm -rf {} +

      - name: Create ZIP (strip -master/-main; no tag in filename)
        run: |
          cd package
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          BASE_NAME="${REPO_NAME%-master}"
          BASE_NAME="${BASE_NAME%-main}"
          ZIP_NAME="${BASE_NAME}.zip"
          zip -r "$ZIP_NAME" ./*
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "ZIP_PATH=$(pwd)/$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload ZIP to this release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get asset URL + release ID + tag
        id: urls
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github, core } = require('@actions/github');
            const tag = context.payload.release.tag_name; // e.g. v1.2.3
            const { data: rel } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });
            const zipName = process.env.ZIP_NAME;
            const asset = rel.assets.find(a => a.name === zipName);
            if (!asset) core.setFailed(`Could not find uploaded asset ${zipName}`);
            core.setOutput('zip_url', asset.browser_download_url);
            core.setOutput('release_id', rel.id);
            core.setOutput('tag', tag);

      - name: Add a prominent Download button to the release body
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          zip_url: ${{ steps.urls.outputs.zip_url }}
          tag: ${{ steps.urls.outputs.tag }}
          release_id: ${{ steps.urls.outputs.release_id }}
          script: |
            const { context, github, core } = require('@actions/github');
            const releaseId = core.getInput('release_id');
            const zipUrl = core.getInput('zip_url');
            const tag = core.getInput('tag'); // e.g. v1.2.3

            // Fetch current body to preserve any existing notes
            const { data: rel } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            const banner = [
              '## üì¶ Download',
              '',
              `[‚¨áÔ∏è **Download ${tag} (ZIP)**](${zipUrl})`,
              '',
              '_Ignore ‚ÄúSource code (zip/tar.gz)‚Äù below ‚Äî those are auto-generated by GitHub._'
            ].join('\n');

            const newBody = (rel.body?.trim() ? rel.body.trim() + '\n\n' : '') + banner;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: newBody
            });
